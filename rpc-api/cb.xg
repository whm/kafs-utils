/* -*- c -*-
 *
 * Interface to the Cache Manager
 *
 *
 * Copyright (c) 1997 - 2003 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

package RXAFSCB_

#include "common.h"

struct AFSDBLockDesc {
	uint8_t		waitStates;
	uint8_t		exclLocked;
	uint16_t	readersReading;
	uint16_t	numWaiting;
	uint16_t	spare;
	int32_t		pid_last_reader;
	int32_t		pid_writer;
	int32_t		src_indicator;
};

struct AFSDBLock {
	char		name[16];
	struct AFSDBLockDesc lock;
};

struct AFSDBCacheEntry {
	int32_t		addr;
	int32_t		cell;                         /*Cell part of the fid*/
	AFSFid		netFid;                      /*Network part of the fid*/
	int32_t		Length;
	int32_t		DataVersion;
	struct AFSDBLockDesc lock;
	int32_t		callback;
	int32_t		cbExpires;
	uint16_t	refCount;
	uint16_t	opens;
	uint16_t	writers;
	uint8_t		mvstat;
	uint8_t		states;
};

const AFSCB_MAX_XSTAT_LONGS = 2048;

typedef int32_t AFSCB_CollData<AFSCB_MAX_XSTAT_LONGS>;

const AFSCB_XSTATSCOLL_CALL_INFO	= 0;	/* CM call counting & info */
const AFSCB_XSTATSCOLL_PERF_INFO	= 1;	/* CM performance info */
const AFSCB_XSTATSCOLL_FULL_PERF_INFO	= 2;	/* CM performance info */

const AFS_MAX_INTERFACE_ADDR = 32;

struct interfaceAddr {          /* for multihomed clients */
	int32_t		numberOfInterfaces;
	afsUUID		uuid;
	uint32_t	addr_in[AFS_MAX_INTERFACE_ADDR]; /* interface addresses */
	uint32_t	subnetmask[AFS_MAX_INTERFACE_ADDR]; /* subnet masks in net ord */
	int32_t		mtu[AFS_MAX_INTERFACE_ADDR]; /* MTU */
};

const AFSMAXCELLHOSTS = 8;	/*Max VLDB servers per cell*/

struct serverList {
	int32_t server[AFSMAXCELLHOSTS];
};

typedef uint32_t cacheConfig<>;


CallBack (IN AFSCBFids *a_fidArrayP,
	  IN AFSCBs *a_callBackArrayP) = 204;

InitCallBackState () = 205;

Probe () =  206;

/* return 0 if ok, 1 if bad index, lock == lock number index */

GetLock(IN int32_t index, OUT AFSDBLock *lock) = 207;

/* return 0 if ok, 1 if bad index, cbentry == cbentry number index */

GetCE(IN int32_t index, OUT AFSDBCacheEntry *cbentry) = 208;

/* AFSCB_XSTAT_VERSION */

XStatsVersion(OUT int32_t *version) = 209;

GetXStats(IN int32_t client_version_num,
	  IN int32_t collection_number,
	  OUT int32_t *server_version_number, /* AFSCB_XSTAT_VERSION */
	  OUT int32_t *time,
	  OUT AFSCB_CollData *stats) = 210;

InitCallBackState2(OUT interfaceAddr *addr) = 211;

/* fill in interfaces et al in `addr' */

WhoAreYou(OUT interfaceAddr *addr) = 212;

/* to be done */

InitCallBackState3(IN afsUUID *serverUuid) = 213;

/* still there?  0 if match, !0 otherwise */

ProbeUUID(IN afsUUID *uuid) = 214;

GetCellServDB(IN uint32_t cellIndex,
	      OUT string cellName<AFSNAMEMAX>,
	      OUT serverList *cellHosts) = 216;

GetLocalCell(OUT string cellName<AFSNAMEMAX>) = 217;

GetCacheConfig(IN uint32_t callerVersion,
	       OUT uint32_t *serverVersion,
	       OUT uint32_t *configCount,
	       OUT cacheConfig *config) = 218;

GetCellByNum(IN  int32_t cellNumber,
	     OUT string cellName<AFSNAMEMAX>,
	     OUT serverList *cellHosts) = 65537;

TellMeAboutYourself(OUT interfaceAddr *addr,
		    OUT Capabilities *capabilities) = 65538;
