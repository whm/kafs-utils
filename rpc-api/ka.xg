/* -*- c -*-
 *
 * Interface to the Authentication Server (KA).
 *
 *
 * Copyright (c) 1999 - 2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

package KA_

const AUTHENTICATE_OLD		= 1;
const CHANGEPASSWORD		= 2;
const GETTICKET_OLD		= 3;
const SETPASSWORD		= 4;
const SETFIELDS			= 5;
const CREATEUSER		= 6;
const DELETEUSER		= 7;
const GETENTRY			= 8;
const LISTENTRY			= 9;
const GETSTATS			= 10;
const DEBUG			= 11;
const GETPASSWORD		= 12;
const GETRANDOMKEY		= 13;
const AUTHENTICATE		= 21;
const GETTICKET			= 23;

const MAXKAKVNO			= 127;

/* Flags (note 0 is illegal) */
const KAFNORMAL			= 0x1;
/* For the two following the KAFNORMAL MUST not be set */
const KAFREE			= 0x2;	/* on freelist */
const KAOLDKEYS			= 0x10;	/* used to store old keys */
/* misc flags */
const KASPECIAL			= 0x100; /* special authserver principal */
const KAFASSOCROOT		= 0x200; /* root of associate tree */
const KAFASSOC			= 0x300; /* associate entry */

/* The following flags are used on KAA_SetFields() */
const KAFADMIN			= 0x004; /* administrator */
const KAFNOTGS			= 0x008; /* can't get or use TGT */
const KAFNOSEAL			= 0x020; /* can't be used as server */
const KAFNOCPW			= 0x040; /* can't change password */
const KAFNEWASSOC		= 0x080; /* can create associates */

/* MISC stuff */
const KAMAJORVERSION		= 5;
const KAMINORVERSION		= 1;
const NEVERDATE			= 037777777777;
const KADEBUGKCINFOSIZE		= 25;

/* Error codes */
const KADATABASEINCONSISTENT	= 180480;
const KAEXIST			= 180481;
const KAIO			= 180482;
const KACREATEFAIL		= 180483;
const KANOENT			= 180484;
const KAEMPTY			= 180485;
const KABADNAME			= 180486;
const KABADINDEX		= 180487;
const KANOAUTH			= 180488;
const KAANSWERTOOLONG		= 180489;
const KABADREQUEST		= 180490;
const KAOLDINTERFACE		= 180491;
const KABADARGUMENT		= 180492;
const KABADCMD			= 180493;
const KANOKEYS			= 180494;
const KAREADPW			= 180495;
const KABADKEY			= 180496;
const KAUBIKINIT		= 180497;
const KAUBIKCALL		= 180498;
const KABADPROTOCOL		= 180499;
const KANOCELLS			= 180500;
const KANOCELL			= 180501;
const KATOOMANYUBIKS		= 180502;
const KATOOMANYKEYS		= 180503;
const KABADTICKET		= 180504;
const KAUNKNOWNKEY		= 180505;
const KAKEYCACHEINVALID		= 180506;
const KABADSERVER		= 180507;
const KABADUSER			= 180508;
const KABADCPW			= 180509;
const KABADCREATE		= 180510;
const KANOTICKET		= 180511;
const KAASSOCUSER		= 180512;
const KANOTSPECIAL		= 180513;
const KACLOCKSKEW		= 180514;
const KANORECURSE		= 180515;
const KARXFAIL			= 180516;
const KANULLPASSWORD		= 180517;
const KAINTERNALERROR		= 180518;
const KAPWEXPIRED		= 180519;
const KAREUSED			= 180520;
const KATOOSOON			= 180521;
const KALOCKED			= 180522;



typedef opaque ka_CBS_Seq<>;

struct EncryptionKey {
	uint8_t key[8];
};

const MAXKANAMELEN = 64;
const KA_LABELSIZE = 4;

%#ifndef MAXKTCTICKETLEN
const MAXKTCTICKETLEN = 344;
%#endif

typedef string kaname<MAXKANAMELEN>;

struct kaident {
	char	name[MAXKANAMELEN];
	char	instance[MAXKANAMELEN];
};

typedef uint32_t Date;

struct kaentryinfo {
	uint32_t	minor_version;
	uint32_t	flags;
	uint32_t	user_expiration;
	Date		modification_time;
	kaident		modification_user;
	Date		change_password_time;
	uint32_t	max_ticket_lifetime;
	uint32_t	key_version;
	EncryptionKey	key;
	uint32_t	keyCheckSym;
	uint32_t	reserved2;
	uint32_t	reserved3;
	uint32_t	reserved4;
};


package KAA_

Authenticate (IN kaname *name,
	      IN kaname *instance,
	      IN Date start_time,
	      IN Date end_time,
	      IN ka_CBS_Seq *request,
	      INOUT int32_t *answer_BBS_MaxSeqLen,
	      INOUT opaque *answer_BBS_Seq<>) = 21;

ChangePassword (IN kaname *name,
		IN kaname *instance,
		IN ka_CBS_Seq *arequest,
		INOUT int32_t *oanswer_BBS_MaxSeqLen,
		INOUT opaque *oanswer_BBS_Seq<>) = 2;

package KAM_

SetPassword (IN kaname *name,
	     IN kaname *instance,
	     IN int32_t kvno,
	     IN EncryptionKey *password) = 4;

SetFields (IN kaname *name,
	   IN kaname *instance,
	   IN int32_t flags,
	   IN Date user_expiration,
	   IN int32_t max_ticket_lifetime,
	   IN int32_t maxAssociates,
	   IN int32_t spare1,
	   IN int32_t spare2) = 5;

CreateUser (IN kaname *name,
	    IN kaname *instance,
	    IN EncryptionKey *password) = 6;

GetEntry (IN kaname *name,
	  IN kaname *instance,
	  IN uint32_t major_version,
	  OUT kaentryinfo *entry) = 8;


package KAT_

GetTicket_old (IN int32_t kvno,
	       IN kaname *auth_domain,
	       IN ka_CBS_Seq *aticket,
	       IN kaname *name,
	       IN kaname *instance,
	       IN ka_CBS_Seq *atimes,
	       INOUT int32_t *oanswer_BBS_MaxSeqLen,
	       INOUT opaque *oanswer_BBS_Seq<>) = 3;

GetTicket (IN int32_t kvno,
	   IN kaname *auth_domain,
	   IN ka_CBS_Seq *aticket,
	   IN kaname *name,
	   IN kaname *instance,
	   IN ka_CBS_Seq *atimes,
	   INOUT int32_t *oanswer_BBS_MaxSeqLen,
	   INOUT opaque *oanswer_BBS_Seq<>) = 23;
